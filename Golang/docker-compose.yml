version: "3"

services:
  broker:
    build:
      context: broker
      dockerfile: docker/Dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang

  auth:
    build:
      context: auth
      dockerfile: docker/Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=postgres dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    networks:
      - golang

  logger:
    build:
      context: logger
      dockerfile: docker/Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_URI: mongodb://mongo:27017
      MONGO_USER: admin
      MONGO_PASSWORD: password
    networks:
      - golang

  web:
    build:
      context: frontend
      dockerfile: docker/Dockerfile
    restart: always
    ports:
      - "5000:80"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - golang

  postgres:
    image: postgres:15-alpine3.17
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - golang

  mongo:
    image: mongo:5.0.17-focal
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db
    networks:
      - golang

volumes:
  db-data: { }
  mongo-data: { }

networks:
  golang: { }
